import 'jest-extended';
import { JobTestHarness, newTestJobConfig } from 'teraslice-test-harness';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
// @ts-expect-error
import fixtures from 'jest-fixtures';
const dirname = path.dirname(fileURLToPath(import.meta.url));

describe('File reader\'s fetcher', () => {
    let harness: JobTestHarness;

    afterEach(async () => {
        if (harness) await harness.shutdown();
    });

    it('can run reader and slicer in long form job specification', async () => {
        // Using some test data generated by the TS `elasticsearch_data_generator`
        const testDataDir = await fixtures.copyFixtureIntoTempDir(dirname, 'file_reader/json/single');
        const apiConfig = {
            _name: 'file_reader_api',
            path: testDataDir,
            compression: 'none',
            size: 400,
            format: 'json',
            line_delimiter: '\n'
        };

        const job = newTestJobConfig({
            apis: [apiConfig],
            operations: [
                { _op: 'file_reader', api_name: 'file_reader_api' },
                { _op: 'noop' }
            ]
        });

        harness = new JobTestHarness(job, {});

        await harness.initialize();

        const results = await harness.runToCompletion();

        expect(results).toBeArrayOfSize(1);

        const { data } = results[0];

        expect(data).toBeArrayOfSize(1);
    });

    it('can run reader and slicer in short form job specification', async () => {
        // Using some test data generated by the TS `elasticsearch_data_generator`
        const testDataDir = await fixtures.copyFixtureIntoTempDir(dirname, 'file_reader/json/single');
        const opConfig = {
            _op: 'file_reader',
            path: testDataDir,
            compression: 'none',
            size: 400,
            format: 'json',
            line_delimiter: '\n'
        };

        const job = newTestJobConfig({
            apis: [],
            operations: [
                opConfig,
                { _op: 'noop' }
            ]
        });

        harness = new JobTestHarness(job, {});

        await harness.initialize();

        const results = await harness.runToCompletion();

        expect(results).toBeArrayOfSize(1);

        const { data } = results[0];

        expect(data).toBeArrayOfSize(1);
    });
});
